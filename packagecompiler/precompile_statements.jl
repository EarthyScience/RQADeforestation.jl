precompile(Tuple{typeof(Base.push!), Array{String, 1}, Base.SubString{String}})
precompile(Tuple{typeof(Main.include), String})
precompile(Tuple{Type{NamedTuple{(:version,), T} where T<:Tuple}, Tuple{Base.VersionNumber}})
precompile(Tuple{Type{NamedTuple{(:rule,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:filename, :first_line), T} where T<:Tuple}, Tuple{Nothing, Int64}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:filename, :first_line), Tuple{Nothing, Int64}}})
precompile(Tuple{typeof(TestItemRunner.run_tests), String})
precompile(Tuple{Base.Filesystem.var"#_walkdir#35"{Bool, Bool, typeof(throw)}, Base.Channel{Tuple{String, Array{String, 1}, Array{String, 1}}}, String})
precompile(Tuple{Base.var"##s128#278", Vararg{Any, 5}})
precompile(Tuple{TestItemRunner.var"#14#16"{String, String}, NamedTuple{(:name, :range, :code_range, :option_default_imports, :option_tags, :option_setup), Tuple{String, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Bool, Array{Symbol, 1}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:filename, :code, :name, :option_tags, :option_default_imports, :option_setup, :line, :column), Tuple{String, String, String, Array{Symbol, 1}, Bool, Array{Symbol, 1}, Int64, Int64}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:filename, :code, :name, :option_tags, :option_default_imports, :option_setup, :line, :column), Tuple{String, String, String, Array{Symbol, 1}, Bool, Array{Symbol, 1}, Int64, Int64}}, 1}, NamedTuple{(:filename, :code, :name, :option_tags, :option_default_imports, :option_setup, :line, :column), Tuple{String, String, String, Array{Symbol, 1}, Bool, Array{Symbol, 1}, Int64, Int64}}, Base.Generator{Array{Any, 1}, TestItemRunner.var"#14#16"{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{T, 1} where T}, Array{NamedTuple{(:filename, :code, :name, :option_tags, :option_default_imports, :option_setup, :line, :column), Tuple{String, String, String, Array{Symbol, 1}, Bool, Array{Symbol, 1}, Int64, Int64}}, 1}, String})
precompile(Tuple{typeof(Base.getindex), Array{NamedTuple{(:filename, :code, :name, :option_tags, :option_default_imports, :option_setup, :line, :column), Tuple{String, String, String, Array{Symbol, 1}, Bool, Array{Symbol, 1}, Int64, Int64}}, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:filename, :code, :name, :option_tags, :option_default_imports, :option_setup, :line, :column), Tuple{String, String, String, Array{Symbol, 1}, Bool, Array{Symbol, 1}, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{Symbol, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:verbose,), Tuple{Bool}}, typeof(TestItemRunner.testset), String})
precompile(Tuple{typeof(TestItemRunner.run_testitem), String, Bool, Array{Symbol, 1}, String, String, Int64, Int64, TestItemRunner.TestSetupModuleSet, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.vect), Array{String, 1}, Vararg{Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.vect), Base.Dict{String, Any}, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), Array{String, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Nothing, Array{String, 1}}}, Array{String, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Array{Union{Nothing, Array{String, 1}}, 1}})
precompile(Tuple{typeof(Bzip2_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.unique!), Array{String, 1}})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Lz4_jll.find_artifact_dir)})
precompile(Tuple{typeof(boost_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.issorted), Array{String, 1}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(Thrift_jll.find_artifact_dir)})
precompile(Tuple{typeof(boost_jll.eager_mode)})
precompile(Tuple{typeof(Zstd_jll.find_artifact_dir)})
precompile(Tuple{typeof(brotli_jll.find_artifact_dir)})
precompile(Tuple{typeof(snappy_jll.find_artifact_dir)})
precompile(Tuple{typeof(Arrow_jll.find_artifact_dir)})
precompile(Tuple{typeof(Bzip2_jll.eager_mode)})
precompile(Tuple{typeof(Lz4_jll.eager_mode)})
precompile(Tuple{typeof(Thrift_jll.eager_mode)})
precompile(Tuple{typeof(Zstd_jll.eager_mode)})
precompile(Tuple{typeof(brotli_jll.eager_mode)})
precompile(Tuple{typeof(snappy_jll.eager_mode)})
precompile(Tuple{typeof(Blosc_jll.find_artifact_dir)})
precompile(Tuple{typeof(Expat_jll.find_artifact_dir)})
precompile(Tuple{typeof(GEOS_jll.find_artifact_dir)})
precompile(Tuple{typeof(OpenSSL_jll.find_artifact_dir)})
precompile(Tuple{typeof(libaec_jll.find_artifact_dir)})
precompile(Tuple{typeof(Hwloc_jll.find_artifact_dir)})
precompile(Tuple{typeof(MPICH_jll.find_artifact_dir)})
precompile(Tuple{typeof(Hwloc_jll.eager_mode)})
precompile(Tuple{typeof(HDF5_jll.find_artifact_dir)})
precompile(Tuple{typeof(OpenSSL_jll.eager_mode)})
precompile(Tuple{typeof(libaec_jll.eager_mode)})
precompile(Tuple{typeof(MPICH_jll.eager_mode)})
precompile(Tuple{typeof(LERC_jll.find_artifact_dir)})
precompile(Tuple{typeof(Kerberos_krb5_jll.find_artifact_dir)})
precompile(Tuple{typeof(ICU_jll.find_artifact_dir)})
precompile(Tuple{typeof(LibPQ_jll.find_artifact_dir)})
precompile(Tuple{typeof(Kerberos_krb5_jll.eager_mode)})
precompile(Tuple{typeof(ICU_jll.eager_mode)})
precompile(Tuple{typeof(JpegTurbo_jll.find_artifact_dir)})
precompile(Tuple{typeof(XZ_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libtiff_jll.find_artifact_dir)})
precompile(Tuple{typeof(JpegTurbo_jll.eager_mode)})
precompile(Tuple{typeof(LERC_jll.eager_mode)})
precompile(Tuple{typeof(XZ_jll.eager_mode)})
precompile(Tuple{typeof(Libiconv_jll.find_artifact_dir)})
precompile(Tuple{typeof(XML2_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libiconv_jll.eager_mode)})
precompile(Tuple{typeof(libzip_jll.find_artifact_dir)})
precompile(Tuple{typeof(NetCDF_jll.find_artifact_dir)})
precompile(Tuple{typeof(Blosc_jll.eager_mode)})
precompile(Tuple{typeof(HDF5_jll.eager_mode)})
precompile(Tuple{typeof(XML2_jll.eager_mode)})
precompile(Tuple{typeof(libzip_jll.eager_mode)})
precompile(Tuple{typeof(LittleCMS_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libtiff_jll.eager_mode)})
precompile(Tuple{typeof(libpng_jll.find_artifact_dir)})
precompile(Tuple{typeof(OpenJpeg_jll.find_artifact_dir)})
precompile(Tuple{typeof(LittleCMS_jll.eager_mode)})
precompile(Tuple{typeof(libpng_jll.eager_mode)})
precompile(Tuple{typeof(SQLite_jll.find_artifact_dir)})
precompile(Tuple{typeof(PROJ_jll.find_artifact_dir)})
precompile(Tuple{typeof(SQLite_jll.eager_mode)})
precompile(Tuple{typeof(Qhull_jll.find_artifact_dir)})
precompile(Tuple{typeof(libgeotiff_jll.find_artifact_dir)})
precompile(Tuple{typeof(PROJ_jll.eager_mode)})
precompile(Tuple{typeof(Giflib_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXau_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXdmcp_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libpthread_stubs_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libxcb_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXau_jll.eager_mode)})
precompile(Tuple{typeof(Xorg_libXdmcp_jll.eager_mode)})
precompile(Tuple{typeof(Xorg_libpthread_stubs_jll.eager_mode)})
precompile(Tuple{typeof(Xorg_xtrans_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libX11_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libxcb_jll.eager_mode)})
precompile(Tuple{typeof(Xorg_xtrans_jll.eager_mode)})
precompile(Tuple{typeof(Xorg_libXext_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libX11_jll.eager_mode)})
precompile(Tuple{typeof(Libglvnd_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXext_jll.eager_mode)})
precompile(Tuple{typeof(libwebp_jll.find_artifact_dir)})
precompile(Tuple{typeof(Giflib_jll.eager_mode)})
precompile(Tuple{typeof(Libglvnd_jll.eager_mode)})
precompile(Tuple{typeof(GDAL_jll.find_artifact_dir)})
precompile(Tuple{typeof(Arrow_jll.eager_mode)})
precompile(Tuple{typeof(Expat_jll.eager_mode)})
precompile(Tuple{typeof(GEOS_jll.eager_mode)})
precompile(Tuple{typeof(LibPQ_jll.eager_mode)})
precompile(Tuple{typeof(NetCDF_jll.eager_mode)})
precompile(Tuple{typeof(OpenJpeg_jll.eager_mode)})
precompile(Tuple{typeof(Qhull_jll.eager_mode)})
precompile(Tuple{typeof(libgeotiff_jll.eager_mode)})
precompile(Tuple{typeof(libwebp_jll.eager_mode)})
precompile(Tuple{Type{Base.VersionNumber}, Int32, Int32, Int32})
precompile(Tuple{typeof(OpenSpecFun_jll.find_artifact_dir)})
precompile(Tuple{typeof(Rmath_jll.find_artifact_dir)})
precompile(Tuple{typeof(Distributions.TestUtils.__init__)})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.convert), Type{String}, String})
precompile(Tuple{typeof(Base.isopen), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.CoreLogging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.GenericCondition{Base.ReentrantLock}, Symbol})
precompile(Tuple{Distributed.var"#137#139"})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Type, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Pair{A, B} where B where A, 1}, Pair{Base.Regex, DataType}})
precompile(Tuple{typeof(libsodium_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{Type{NamedTuple{(:segments,), T} where T<:Tuple}, Tuple{Tuple{String}}})
precompile(Tuple{Type{FilePathsBase.PosixPath}, Tuple{String}})
precompile(Tuple{FilePathsBase.var"##PosixPath#45", String, Type{FilePathsBase.PosixPath}, Tuple{String}})
precompile(Tuple{Type{FilePathsBase.PosixPath}, Tuple{String}, String})
precompile(Tuple{typeof(Base.CoreLogging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Base.repeat), Char, Int64})
precompile(Tuple{typeof(Base.Filesystem.cd), TestItemRunner.var"#7#11"{String, String, Module}, String})
precompile(Tuple{typeof(Base.include_string), Module, String, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Distances.evaluate), RQADeforestation.CheckedEuclidean, Int64, Int64})
precompile(Tuple{typeof(Distances.evaluate), Distances.Euclidean, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Int64, Float64})
precompile(Tuple{typeof(Test.do_test), Test.ExecutionResult, Any})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.copy!), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:recursive,), Tuple{Bool}}, typeof(Base.Filesystem.rm), String})
precompile(Tuple{Type{UndefKeywordError}, Symbol})
precompile(Tuple{Type{NamedTuple{(:scheme, :host, :path), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:scheme, :host, :path), Tuple{String, String, String}}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:scheme, :host, :path), Tuple{String, String, String}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, String, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:scheme, :host, :path), Tuple{String, String, String}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:scheme, :host, :path), Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.codeunit), String, Int64})
precompile(Tuple{typeof(Base.between), UInt8, UInt8, UInt8})
precompile(Tuple{typeof(Base.reinterpret), Type{Char}, UInt32})
precompile(Tuple{typeof(Base.:(==)), Char, Char})
precompile(Tuple{Type{NamedTuple{(:status_exception,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:connect_timeout, :retry), T} where T<:Tuple}, Tuple{Int64, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:connect_timeout, :retry), Tuple{Int64, Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:connect_timeout, :retry), Tuple{Int64, Bool}}, NamedTuple{(:status_exception,), Tuple{Bool}}})
precompile(Tuple{Base.var"##s128#279", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:connect_timeout, :retry, :status_exception), Tuple{Int64, Bool, Bool}}, Type{NamedTuple{(:headers, :body, :query, :observelayers), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:connect_timeout, :retry, :status_exception), Tuple{Int64, Bool, Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:connect_timeout, :retry, :status_exception), Tuple{Int64, Bool, Bool}}}})
precompile(Tuple{typeof(Base.:(*)), Vararg{String, 4}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Base.SubString{Base.AnnotatedString{String}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Base.BottomRF{typeof(Base.:(+))}, Base._InitialValue, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{String, String}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{String, String}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Pair{String, String}})
precompile(Tuple{typeof(Base.iterate), Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64, Int64})
precompile(Tuple{Type{Int64}, Char})
precompile(Tuple{typeof(Base.:(-)), UInt64, Int64})
precompile(Tuple{typeof(Base.something), Nothing, Type})
precompile(Tuple{typeof(Base.:(|)), Int32, Int32})
precompile(Tuple{EzXML.var"##parse_options#8", Bool, Bool, Bool, Bool, typeof(EzXML.parse_options)})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int32, NamedTuple{(:noerror, :nowarning), Tuple{Bool, Bool}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int32, NamedTuple{(:noerror, :nowarning), Tuple{Bool, Bool}}}, Int64, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:noerror, :nowarning), Tuple{Bool, Bool}}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Ptr{EzXML._Node}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.Iterators.filter), Function, Tuple{String}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.isempty)}, Tuple{String}})
precompile(Tuple{typeof(Base.Iterators.rest), Base.Iterators.Filter{Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.isempty)}, Tuple{String}}})
precompile(Tuple{typeof(Base.getproperty), Base.Iterators.Filter{Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.isempty)}, Tuple{String}}, Symbol})
precompile(Tuple{Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.isempty)}, String})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Union{String, Symbol}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:join,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Array{String, 1}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.:(<=)), Int64, UInt8})
precompile(Tuple{typeof(Base.:(<=)), UInt8, Int64})
precompile(Tuple{typeof(Base.rem), UInt8, Type{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Signed}, UInt16})
precompile(Tuple{typeof(Base.convert), Type{Signed}, UInt8})
precompile(Tuple{typeof(Base.isempty), Base.UnitRange{Int64}})
precompile(Tuple{Dates.var"##s52#36", Vararg{Any, 8}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{:yyyymmddTHHMMSS, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.DatePart{Char(0x6d000000)}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x53000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, NTuple{8, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{Type{Tuple}, Base.Generator{NTuple{8, DataType}, Dates.var"#37#38"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{NTuple{8, DataType}, Dates.var"#37#38"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{NTuple{8, DataType}, Dates.var"#37#38"}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Dates.var"##s53#33", Vararg{Any, 6}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{:yyyymmddTHHMMSS, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.DatePart{Char(0x6d000000)}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x53000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, Dates.var"#34#35"}, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, NTuple{6, Int64}}})
precompile(Tuple{Type{NetCDF.ASCIIChar}, Int64})
precompile(Tuple{typeof(Base.isequal), NetCDF.ASCIIChar})
precompile(Tuple{Type{NamedTuple{(:add_finalizer,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:add_finalizer,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{Type{NamedTuple{(:persist,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:mode, :readdimvar, :add_finalizer), T} where T<:Tuple}, Tuple{UInt16, Bool, Bool}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{DiskArrays.var"#173#176"}, Symbol})
precompile(Tuple{Type{DiskArrays.Unchunked{BS} where BS}, DiskArrays.SubRanges{DiskArrays.NoStepRange}})
precompile(Tuple{Type{DiskArrays.Chunked{BS} where BS}, DiskArrays.SubRanges{DiskArrays.NoStepRange}})
precompile(Tuple{typeof(Base.:(<=)), UInt8, UInt64})
precompile(Tuple{typeof(Base.rem), UInt8, Type{UInt64}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{typeof(Base.:(<))}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.ReverseOrdering{Base.Order.Lt{typeof(Base.:(<))}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Int64})
precompile(Tuple{Type{DiskArrays.NoBatch{S} where S}, Bool, Float64})
precompile(Tuple{DiskArrays.var"#40#42", Function})
precompile(Tuple{DiskArrays.var"#41#43", Function})
precompile(Tuple{typeof(Base._any_tuple), Function, Bool})
precompile(Tuple{Base.var"#58#59", Type})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Vararg{Int64, 4}})
precompile(Tuple{NetCDF.var"##s15#19", Vararg{Any, 4}})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), QuoteNode, Base.Cartesian.LReplace{String}})
precompile(Tuple{Type{Char}, UInt16})
precompile(Tuple{Type{Pair{A, B} where B where A}, Base.Regex, String})
precompile(Tuple{Type{NamedTuple{(:foreground, :bold), T} where T<:Tuple}, Tuple{Symbol, Bool}})
precompile(Tuple{Type{Crayons.ANSIStyle}, Bool})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, YAXArrays.Cubes.YAXArray{T, N, A, D, Me} where Me where D where A<:AbstractArray{T, N} where N where T, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, YAXArrays.Cubes.CleanMe, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{YAXArrays.Cubes.var"#52#57", Base.BottomRF{typeof(Base.append!)}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.append!)}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(YAXArrayBase.getattributes), typeof(Base.merge)}, Symbol})
precompile(Tuple{typeof(Base.:(&)), Bool, Base.Missing})
precompile(Tuple{Type{Dates.Day}, Int64})
precompile(Tuple{Type{Base.Returns{V} where V}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(YAXArrays.get_descriptor), Tuple{Tuple{}}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:backtrace,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{12, Symbol}})
precompile(Tuple{typeof(Base.min), Int64, Int64})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Base.UnitRange{Int64}, Tuple{YAXArrays.DAT.OutDims}}}, Int64})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, DimensionalData.Dimensions.Dimension{T} where T, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{Base.var"#70#71"{YAXArrays.DAT.var"#77#78"}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.mul_prod)}, Symbol})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, NamedTuple{(:iloopax, :cs, :iscompressed, :innerleap, :preventpar), Tuple{Int64, DiskArrays.ChunkType, Bool, Int64, Bool}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.GMP.MPZ.mul!)}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Set{Int64}, Symbol})
precompile(Tuple{Type{NamedTuple{(:capture_data,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Int64, Distributed.BatchProcessingError}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(RQADeforestation.julia_main)})
precompile(Tuple{typeof(ArgParse.parse_args), ArgParse.ArgParseSettings})
precompile(Tuple{ArgParse.var"##parse_args#62", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.parse_args), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{ArgParse.var"##parse_args#63", Bool, typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#70#72", Array{String, 1}, Base.Colon})
precompile(Tuple{ArgParse.var"#70#72", Any})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{ArgParse.var"##add_arg_field!#25", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(ArgParse.check_name_format), Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.startswith), String, Char})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#26#28", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#26#28"}})
precompile(Tuple{ArgParse.var"#26#28", Any})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{ArgParse.ArgConsumerType}})
precompile(Tuple{Type{ArgParse.ArgConsumerType}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.check_type), Any, Type, AbstractString})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(ArgParse.check_action_is_valid), Symbol})
precompile(Tuple{typeof(ArgParse.check_nargs_and_action), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(ArgParse.is_flag_action), Symbol})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(ArgParse.is_command_action), Symbol})
precompile(Tuple{Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, AbstractString, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(ArgParse.name_to_fieldnames!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#21"{ArgParse.ArgParseSettings, ArgParse.var"#r#20"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{ArgParse.var"#do_one#21"{ArgParse.ArgParseSettings, ArgParse.var"#r#20"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any})
precompile(Tuple{ArgParse.var"#do_one#21"{ArgParse.ArgParseSettings, ArgParse.var"#r#20"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any, Any})
precompile(Tuple{ArgParse.var"#r#20"{ArgParse.ArgParseSettings}, Any})
precompile(Tuple{typeof(ArgParse.check_long_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(ArgParse.check_short_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(ArgParse.auto_dest_name), AbstractString, Array{AbstractString, 1}, Array{AbstractString, 1}, Bool})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{ArgParse.var"#r#22"{Bool}, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(ArgParse.get_group), AbstractString, ArgParse.ArgParseField, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.is_cmd), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(ArgParse.is_arg), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(ArgParse.warn_extra_opts), Any, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.check_dest_name), AbstractString})
precompile(Tuple{ArgParse.var"#set_if_valid#30"{Array{Symbol, 1}, ArgParse.ArgParseField}, Any, Any})
precompile(Tuple{typeof(Base.deepcopy), Any})
precompile(Tuple{typeof(ArgParse.check_arg_makes_sense), ArgParse.ArgParseSettings, ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.check_conflicts_with_commands), ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(ArgParse.check_for_duplicates), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{Type{ArgParse.ParserState}, Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#65#67", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#64#66", Base.Iterators.Filter{ArgParse.var"#65#67", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#65#67", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#64#66"}})
precompile(Tuple{ArgParse.var"#65#67", Any})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.copy), GenericMemory{:not_atomic, Int64, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{String, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{GenericMemory{:not_atomic, String, Core.AddrSpace{Core}(0x00)}}, UndefInitializer, Int64})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{Type{NamedTuple{(:taskref, :spawn, :threadpool), T} where T<:Tuple}, Tuple{Nothing, Bool, Nothing}})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#738", Nothing, Bool, Nothing, Type{Base.Channel{Any}}, ArgParse.var"#71#73"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#739#740"{ArgParse.var"#71#73"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{ArgParse.var"#71#73"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Any})
precompile(Tuple{typeof(ArgParse.preparse!), Base.Channel{T} where T, ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.findfirst), Function, String})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(ArgParse.parse_long_opt!), ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.is_flag), ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.parse1_optarg!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Any, AbstractString})
precompile(Tuple{typeof(ArgParse.test_exclusive_groups!), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseSettings, ArgParse.ArgParseField, AbstractString})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(ArgParse.is_multi_nargs), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{Type{Array{String, N} where N}, UndefInitializer, Int64})
precompile(Tuple{typeof(ArgParse.looks_like_an_option), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{String}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{String}, AbstractString})
precompile(Tuple{typeof(ArgParse.test_range), Function, Any, AbstractString})
precompile(Tuple{ArgParse.var"#27#29", Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Bool})
precompile(Tuple{typeof(ArgParse.idstring), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{typeof(ArgParse.found_command), ArgParse.ParserState})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{Any}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{Any}, AbstractString})
precompile(Tuple{Base.var"#743#744"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(ArgParse.test_required_args), ArgParse.ArgParseSettings, Base.Set{AbstractString}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#39#43", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#38#42", Base.Iterators.Filter{ArgParse.var"#39#43", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#39#43", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#38#42"}})
precompile(Tuple{ArgParse.var"#39#43", Any})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ArgParse.ArgParseGroup, Bool}, Bool, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.has_cmd), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, RQADeforestation.var"#41#42", Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Dict{String, Any}, RQADeforestation.var"#41#42"}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, String}, Base.Generator{Base.Dict{String, Any}, RQADeforestation.var"#41#42"}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Base.Generator{Base.Dict{String, Any}, RQADeforestation.var"#41#42"}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indir, :tiles, :threshold, :years, :orbit, :folders, :polarisation, :outdir, :continent), Tuple{String, Array{String, 1}, Float64, Array{Int64, 1}, String, Array{String, 1}, String, String, String}}, typeof(RQADeforestation.main)})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.getindex), OrderedCollections.OrderedDict{Symbol, Any}, Symbol})
precompile(Tuple{Type{Ptr{Base.Cstring}}, Ptr{Nothing}})
precompile(Tuple{Type{Int64}, ArchGDAL.GDALOpenFlag})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int32}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int32}}, Ptr{Nothing}})
precompile(Tuple{Type{NamedTuple{(:offset,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.identity), NTuple{6, Float64}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.identity), Tuple{NTuple{6, Float64}}}, Symbol})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Int32, Int32}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{Type{ArchGDALExt.GDALDataset}, String})
precompile(Tuple{typeof(GDAL.maybe_throw)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:ownedby,), Tuple{ArchGDAL.Dataset}}, Type{ArchGDAL.IRasterBand{Int16}}, Ptr{Nothing}})
precompile(Tuple{Type{ArchGDALExt.GDALBand{T} where T}, ArchGDAL.IRasterBand{Int16}, String, Int64})
precompile(Tuple{typeof(GDAL.aftercare), Nothing})
precompile(Tuple{typeof(ArchGDAL.getcolorinterp), ArchGDAL.IRasterBand{Int16}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, ArchGDALExt.GDALBand{Int16}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Pair{String, ArchGDALExt.GDALBand{Int16}}}, Base.Generator{Base.UnitRange{Int64}, ArchGDALExt.var"#11#14"{ArchGDAL.Dataset, String}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, ArchGDALExt.GDALBand{Int16}}, 1}, Pair{String, ArchGDALExt.GDALBand{Int16}}, Base.Generator{Base.UnitRange{Int64}, ArchGDALExt.var"#11#14"{ArchGDAL.Dataset, String}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.first), Tuple{Array{Pair{String, ArchGDALExt.GDALBand{Int16}}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.first), Tuple{Array{Pair{String, ArchGDALExt.GDALBand{Int16}}, 1}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.first), Tuple{Array{Pair{String, ArchGDALExt.GDALBand{Int16}}, 1}}}})
precompile(Tuple{typeof(Base.allunique), Array{String, 1}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, ArchGDALExt.GDALBand{Int16}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Array{Pair{String, ArchGDALExt.GDALBand{Int16}}, 1}})
precompile(Tuple{Type{ArchGDALExt.GDALDataset}, String, Tuple{Int64, Int64}, String, Array{Float64, 1}, OrderedCollections.OrderedDict{String, ArchGDALExt.GDALBand{Int16}}})
precompile(Tuple{typeof(Base.isempty), Array{Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Base.getindex), Pair{Base.Regex, DataType}, Int64})
precompile(Tuple{YAXArrayBase.var"##to_dataset#7", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(YAXArrayBase.to_dataset), Type{ArchGDALExt.GDALDataset}, String})
precompile(Tuple{typeof(YAXArrayBase.open_dataset_handle), YAXArrays.Datasets.var"#67#75", ArchGDALExt.GDALDataset})
precompile(Tuple{typeof(Base.keys), OrderedCollections.OrderedDict{String, ArchGDALExt.GDALBand{Int16}}})
precompile(Tuple{typeof(Base.collect), Base.KeySet{String, OrderedCollections.OrderedDict{String, ArchGDALExt.GDALBand{Int16}}}})
precompile(Tuple{typeof(Base.getindex), OrderedCollections.OrderedDict{String, ArchGDALExt.GDALBand{Int16}}, String})
precompile(Tuple{typeof(Base.size), ArchGDALExt.GDALBand{Int16}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Int64, Int64}, Tuple{String, String}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Tuple{Int64, Int64}, Tuple{String, String}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, String, Int64})
precompile(Tuple{typeof(Base.push!), Base.Set{Tuple{String, Int64, Int64}}, Tuple{String, Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Tuple{Int64, Int64}, Tuple{String, String}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, String})
precompile(Tuple{typeof(Base.Unicode.lowercase), String})
precompile(Tuple{typeof(Base.match), Base.Regex, String})
precompile(Tuple{typeof(Base.lastindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(YAXArrays.Datasets.cleanaxiselement), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(YAXArrays.Datasets.cleanaxiselement), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(YAXArrays.Datasets.testrange), Array{Float64, 1}})
precompile(Tuple{typeof(Base.issorted), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(DimensionalData.Dimensions.Lookups.rebuild), DimensionalData.Dimensions.X{Base.Colon}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, NamedTuple{(:ax, :offs), Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{NamedTuple{(:ax, :offs), Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, NamedTuple{(:ax, :offs), Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64}}}, NamedTuple{(:ax, :offs), Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64}}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, NamedTuple{(:ax, :offs), Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64}}}, Base.Generator{Base.Set{Tuple{String, Int64, Int64}}, YAXArrays.Datasets.var"#44#46"{ArchGDALExt.GDALDataset}}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:rev,), Tuple{Bool}}, typeof(Base.issorted), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(DimensionalData.Dimensions.Lookups.rebuild), DimensionalData.Dimensions.Y{Base.Colon}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, NamedTuple{(:ax, :offs), Tuple{DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, NamedTuple{(:ax, :offs), Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64}}}, Type{String}, Type{NamedTuple{(:ax, :offs), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}, Base.Dict{String, NamedTuple{(:ax, :offs), Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}, NamedTuple{(:ax, :offs), Tuple{DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64}}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}, Base.Generator{Base.Set{Tuple{String, Int64, Int64}}, YAXArrays.Datasets.var"#44#46"{ArchGDALExt.GDALDataset}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Base.KeySet{String, Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}}})
precompile(Tuple{typeof(Base.filter), YAXArrays.Datasets.var"#68#76"{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, YAXArrays.Datasets.var"#70#78"{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}}, Tuple{String, String}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{String, String}, YAXArrays.Datasets.var"#70#78"{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}}}})
precompile(Tuple{typeof(Base._array_for), Type{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, 1}, DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Base.Generator{Tuple{String, String}, YAXArrays.Datasets.var"#70#78"{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, 1}, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{DimensionalData.Dimensions.Dimension{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, 1}, Base.Generator{Tuple{String, String}, YAXArrays.Datasets.var"#70#78"{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}}}, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, YAXArrays.Datasets.var"#71#79"{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}}, Tuple{String, String}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{String, String}, YAXArrays.Datasets.var"#71#79"{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{String, String}, YAXArrays.Datasets.var"#71#79"{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}}}, Int64})
precompile(Tuple{typeof(Base.all), Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.iszero), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), ArchGDALExt.GDALBand{Int16}, Symbol})
precompile(Tuple{typeof(Base.merge), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(YAXArrays.Datasets.propfromattr), Base.Dict{String, Any}})
precompile(Tuple{Type{DiskArrayTools.CFDiskArray{T, N, MT, P, OT} where OT where P where MT where N where T}, ArchGDALExt.GDALBand{Int16}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Int16}, Float64})
precompile(Tuple{Type{DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 2, Int16, ArchGDALExt.GDALBand{Int16}, Int16}}, ArchGDALExt.GDALBand{Int16}, Int16, Int16, Int16})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:cleaner,), Tuple{Array{YAXArrays.Cubes.CleanMe, 1}}}, Type{YAXArrays.Cubes.YAXArray{T, N, A, D, Me} where Me where D where A<:AbstractArray{T, N} where N where T}, Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 2, Int16, ArchGDALExt.GDALBand{Int16}, Int16}, Base.Dict{String, Any}})
precompile(Tuple{YAXArrays.Cubes.var"##YAXArray#5", Array{YAXArrays.Cubes.CleanMe, 1}, DiskArrays.GridChunks{2, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, Type{YAXArrays.Cubes.YAXArray{T, N, A, D, Me} where Me where D where A<:AbstractArray{T, N} where N where T}, Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 2, Int16, ArchGDALExt.GDALBand{Int16}, Int16}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.length), DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{typeof(Base.length), DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(DimensionalData.Dimensions.format), Tuple{DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 2, Int16, ArchGDALExt.GDALBand{Int16}, Int16}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data, :order, :span, :sampling), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points}}, typeof(DimensionalData.Dimensions.Lookups.rebuild), DimensionalData.Dimensions.Lookups.Sampled{Int64, DimensionalData.Dimensions.Lookups.AutoValues, DimensionalData.Dimensions.Lookups.AutoOrder, DimensionalData.Dimensions.Lookups.AutoSpan, DimensionalData.Dimensions.Lookups.AutoSampling, DimensionalData.Dimensions.Lookups.NoMetadata}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, YAXArrays.Cubes.YAXArray{T, N, A, D, Me} where Me where D where A<:AbstractArray{T, N} where N where T}, YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 2, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 2, Int16, ArchGDALExt.GDALBand{Int16}, Int16}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, YAXArrays.Datasets.var"#74#82", Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}, YAXArrays.Datasets.var"#74#82"}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.Generator{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}, YAXArrays.Datasets.var"#74#82"}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Type{Symbol}, Type{DimensionalData.Dimensions.Dimension{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, DimensionalData.Dimensions.Dimension{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.Dict{Symbol, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, DimensionalData.Dimensions.Dimension{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, DimensionalData.Dimensions.Dimension{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.Generator{Base.Dict{String, NamedTuple{(:ax, :offs), T} where T<:Tuple}, YAXArrays.Datasets.var"#74#82"}, Int64})
precompile(Tuple{Type{YAXArrays.Datasets.Dataset}, OrderedCollections.OrderedDict{Symbol, YAXArrays.Cubes.YAXArray{T, N, A, D, Me} where Me where D where A<:AbstractArray{T, N} where N where T}, Base.Dict{Symbol, DimensionalData.Dimensions.Dimension{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, DimensionalData.Dimensions.Dimension{T} where T}, DimensionalData.Dimensions.Y{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, DimensionalData.Dimensions.Dimension{T} where T}, DimensionalData.Dimensions.X{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 2, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 2, Int16, ArchGDALExt.GDALBand{Int16}, Int16}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, RQADeforestation.var"#3#4"{ArchGDALExt.GDALBand{Int16}}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, RQADeforestation.var"#3#4"{ArchGDALExt.GDALBand{Int16}}}})
precompile(Tuple{typeof(DiskArrayTools.diskstack), Array{RQADeforestation.BufferGDALBand{Int16}, 1}})
precompile(Tuple{typeof(Base.copy), Base.Dict{String, Any}})
precompile(Tuple{Type{DiskArrayTools.CFDiskArray{T, N, MT, P, OT} where OT where P where MT where N where T}, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Base.Dict{String, Any}})
precompile(Tuple{Type{DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}}, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16, Int16, Int16})
precompile(Tuple{typeof(Base.getproperty), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 2, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 2, Int16, ArchGDALExt.GDALBand{Int16}, Int16}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, Symbol})
precompile(Tuple{Type{YAXArrays.Cubes.YAXArray{T, N, A, D, Me} where Me where D where A<:AbstractArray{T, N} where N where T}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{Array{Dates.DateTime, 1}}}, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Base.Dict{String, Any}})
precompile(Tuple{Type{DiskArrays.GridChunks{N, C} where C<:Tuple{Vararg{DiskArrays.ChunkType, N}} where N}, DiskArrays.RegularChunks, Vararg{DiskArrays.RegularChunks}})
precompile(Tuple{Type{DiskArrays.GridChunks{N, C} where C<:Tuple{Vararg{DiskArrays.ChunkType, N}} where N}, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks, DiskArrays.RegularChunks}})
precompile(Tuple{YAXArrays.Cubes.var"##YAXArray#5", Array{YAXArrays.Cubes.CleanMe, 1}, DiskArrays.GridChunks{3, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, Type{YAXArrays.Cubes.YAXArray{T, N, A, D, Me} where Me where D where A<:AbstractArray{T, N} where N where T}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{Array{Dates.DateTime, 1}}}, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.length), DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.length), DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.length), DimensionalData.Dimensions.Ti{Array{Dates.DateTime, 1}}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(DimensionalData.Dimensions.format), Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{Array{Dates.DateTime, 1}}}, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:data, :order, :span, :sampling), Tuple{Array{Dates.DateTime, 1}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points}}, typeof(DimensionalData.Dimensions.Lookups.rebuild), DimensionalData.Dimensions.Lookups.Sampled{Int64, DimensionalData.Dimensions.Lookups.AutoValues, DimensionalData.Dimensions.Lookups.AutoOrder, DimensionalData.Dimensions.Lookups.AutoSpan, DimensionalData.Dimensions.Lookups.AutoSampling, DimensionalData.Dimensions.Lookups.NoMetadata}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:msg,), Tuple{Nothing}}, typeof(Base.time_print), Base.TTY, Float64, Int64, Int64, Int64, Int64, Float64, Float64, Bool})
precompile(Tuple{Base.var"#1138#1139"{Nothing, Float64, Int64, Int64, Int64, Float64, Float64, Bool, String}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.prettyprint_getunits), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Ryu.writefixed), Float64, Int64})
precompile(Tuple{DimensionalData.Dimensions.var"##s120#118", Vararg{Any, 4}})
precompile(Tuple{typeof(ArchGDAL.destroy), ArchGDAL.IRasterBand{Int16}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:Time,), Tuple{IntervalSets.Interval{:closed, :closed, Dates.Date}}}, typeof(Base.getindex), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Array{Dates.DateTime, 1}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(YAXArrays.getAxis), Symbol, YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Array{Dates.DateTime, 1}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{YAXArrays.var"#1#2"{YAXArrays.ByName}, DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{YAXArrays.var"#1#2"{YAXArrays.ByName}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{YAXArrays.var"#1#2"{YAXArrays.ByName}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Array{Dates.DateTime, 1}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.argtail), DimensionalData.Dimensions.Ti{Base.Colon}})
precompile(Tuple{Type{DiskArrays.Chunked{BS} where BS}, DiskArrays.ChunkRead{DiskArrays.NoStepRange}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, DiskArrays.var"#131#134"{Tuple{}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, DiskArrays.IrregularChunks, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, DiskArrays.RegularChunks, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, DiskArrays.ChunkType, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:Ti,), Tuple{IntervalSets.Interval{:closed, :closed, Dates.Date}}}, typeof(Base.view), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Array{Dates.DateTime, 1}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, DiskArrays.var"#130#133"{DiskArrays.GridChunks{3, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}}, Base.Iterators.Filter{DiskArrays.var"#131#134"{Tuple{}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{DiskArrays.var"#131#134"{Tuple{}}, Base.UnitRange{Int64}}, DiskArrays.var"#130#133"{DiskArrays.GridChunks{3, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}}}})
precompile(Tuple{YAXArrays.Cubes.var"##YAXArray#5", Array{YAXArrays.Cubes.CleanMe, 1}, DiskArrays.GridChunks{3, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, Type{YAXArrays.Cubes.YAXArray{T, N, A, D, Me} where Me where D where A<:AbstractArray{T, N} where N where T}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.length), DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(DimensionalData.Dimensions.format), Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.size), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Array{Dates.DateTime, 1}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.repr), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.size), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.size), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, Int64})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Tuple{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}}, Tuple{YAXArrays.DAT.InDims}}}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:thresh, :outpath, :overwrite), Tuple{Float64, String, Bool}}, typeof(RQADeforestation.rqatrend), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indims, :outdims), Tuple{YAXArrays.DAT.InDims, YAXArrays.DAT.OutDims}}, typeof(YAXArrays.DAT.mapCube), Function, Tuple{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}}, Float64})
precompile(Tuple{YAXArrays.DAT.var"##mapCube#52", Float64, YAXArrays.DAT.InDims, YAXArrays.DAT.OutDims, Bool, Bool, Bool, Bool, Bool, Bool, Array{Int64, 1}, Base.Dict{Any, Any}, Bool, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(YAXArrays.DAT.mapCube), typeof(RQADeforestation.rqatrend), Tuple{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(YAXArrays.findAxis), Tuple{YAXArrays.ByName}, Base.RefValue{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(YAXArrays.findAxis), Tuple{Tuple{YAXArrays.ByName}, Base.RefValue{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}}}}})
precompile(Tuple{YAXArrays.var"#1#2"{YAXArrays.ByName}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.any), Function, Tuple{Int64}})
precompile(Tuple{typeof(Base.findall), YAXArrays.DAT.var"#11#14", Tuple{YAXArrays.ByName}})
precompile(Tuple{typeof(Base.getindex), Tuple{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.map), YAXArrays.DAT.var"#12#15"{Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.findall), YAXArrays.DAT.var"#13#16", Tuple{YAXArrays.ByName}})
precompile(Tuple{typeof(Base.collect), Tuple{}})
precompile(Tuple{typeof(Base.collect), Tuple{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}})
precompile(Tuple{typeof(Base.collect), Tuple{Int64}})
precompile(Tuple{Type{YAXArrays.DAT.InputCube{3}}, YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, YAXArrays.DAT.InDims, Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}, Array{Int64, 1}, Nothing, Array{Int64, 1}, Array{Int64, 1}, Array{Tuple{Int64, Int64}, 1}, Array{Union{}, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, YAXArrays.DAT.var"#32#35", Tuple{YAXArrays.DAT.InputCube{3}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{YAXArrays.DAT.InputCube{3}}, YAXArrays.DAT.var"#32#35"}})
precompile(Tuple{typeof(Base._array_for), Type{Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}, 1}, Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}, Base.Generator{Tuple{YAXArrays.DAT.InputCube{3}}, YAXArrays.DAT.var"#32#35"}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{YAXArrays.DAT.var"#33#36"{Tuple{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}}, typeof(RQADeforestation.rqatrend), Tuple{Float64}, Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}}}, Base.Iterators.Zip{Tuple{Base.UnitRange{Int64}, Tuple{YAXArrays.DAT.OutDims}}}})
precompile(Tuple{typeof(Base.getproperty), DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.Points})
precompile(Tuple{typeof(Base.oneto), Int64})
precompile(Tuple{typeof(Base.ntuple), Base.Returns{Base.OneTo{Int64}}, Base.Val{1}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Float64, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.Compiler.instanceof_tfunc), Any, Bool, Core.PartialStruct})
precompile(Tuple{StaticArrays.var"##s26#84", Any, Any, Any})
precompile(Tuple{typeof(Base.isqrt), Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{2}})
precompile(Tuple{typeof(StaticArrays._SA_hvcat_transposed_size), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Type, Function, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.transpose), Float64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Type, Function, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Base.UnitRange{Int64}, Tuple{YAXArrays.DAT.OutDims}}}, Base.var"#4#5"{YAXArrays.DAT.var"#33#36"{Tuple{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}}, typeof(RQADeforestation.rqatrend), Tuple{Float64}, Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}}}}})
precompile(Tuple{typeof(YAXArrays.DAT.interpretoutchunksizes), YAXArrays.DAT.OutDims, Tuple{}, Tuple{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base.collect), Type{DimensionalData.Dimensions.Dimension{T} where T}, Tuple{}})
precompile(Tuple{Type{YAXArrays.DAT.OutputCube}, Nothing, Nothing, YAXArrays.DAT.OutDims, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Array{Int64, 1}, Tuple{}, Type})
precompile(Tuple{Type{YAXArrays.DAT.DATConfig{NIN, NOUT} where NOUT where NIN}, Tuple{YAXArrays.DAT.InputCube{3}}, Tuple{YAXArrays.DAT.OutputCube}, Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Bool, Array{Int64, 1}, Bool, Float64, typeof(RQADeforestation.rqatrend), Bool, Bool, Array{Int64, 1}, Bool, Tuple{Float64}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(YAXArrays.DAT.analyzeAxes), YAXArrays.DAT.DATConfig{1, 1}})
precompile(Tuple{typeof(YAXArrays.Cubes.caxes), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.in), DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}})
precompile(Tuple{typeof(Base.push!), Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.in), DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}})
precompile(Tuple{typeof(Base.push!), Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.in), DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{typeof(Base.getindex), Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Int64})
precompile(Tuple{typeof(Base.typed_vcat), Type{DimensionalData.Dimensions.Dimension{T} where T}, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{typeof(Base.setproperty!), YAXArrays.DAT.OutputCube, Symbol, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{typeof(YAXArrays.DAT.permuteloopaxes), YAXArrays.DAT.DATConfig{1, 1}})
precompile(Tuple{typeof(Base.foreach), YAXArrays.DAT.var"#77#78", Tuple{YAXArrays.DAT.InputCube{3}}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.GMP.MPZ.add!)}, Symbol})
precompile(Tuple{typeof(YAXArrays.DAT.getCacheSizes), YAXArrays.DAT.DATConfig{1, 1}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.length), Tuple{Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, Type{Int64}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, Type{Int64}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}}}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{Int64}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}}}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Array{Int64, 1}, 1}, Tuple{YAXArrays.DAT.InputCube{3}}}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Int64, 1}, 1}, Tuple{YAXArrays.DAT.InputCube{3}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{YAXArrays.DAT.var"#133#136"}, Base.Iterators.Zip{Tuple{Array{Array{Int64, 1}, 1}, Tuple{YAXArrays.DAT.InputCube{3}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Array{Int64, 1}, 1}, Tuple{YAXArrays.DAT.InputCube{3}}}}, Base.var"#4#5"{YAXArrays.DAT.var"#133#136"}}})
precompile(Tuple{typeof(YAXArrays.DAT.mysizeof), Type})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Array{Int64, 1}, 1}, Tuple{YAXArrays.DAT.InputCube{3}}}}, Base.var"#4#5"{YAXArrays.DAT.var"#133#136"}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.sum), Tuple{Int64}})
precompile(Tuple{typeof(Base.foreach), Function, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Base.UnitRange{Int64}})
precompile(Tuple{YAXArrays.DAT.var"#135#138"{YAXArrays.DAT.DATConfig{1, 1}, Base.Dict{Int64, Int64}}, DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, Int64})
precompile(Tuple{typeof(YAXArrays.findAxis), DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{YAXArrays.var"#1#2"{YAXArrays.ByValue}, DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.isequal), DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{YAXArrays.var"#1#2"{YAXArrays.ByValue}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{YAXArrays.var"#1#2"{YAXArrays.ByValue}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.map), Function, Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}, Base.Generator{Array{DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._prod), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, Symbol})
precompile(Tuple{typeof(DiskArrays.eachchunk), DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.getproperty), DiskArrays.GridChunks{3, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{NamedTuple{(:iloopax, :cs, :iscompressed, :innerleap, :preventpar), Tuple{Int64, DiskArrays.ChunkType, Bool, Int64, Bool}}, 1}, NamedTuple{(:iloopax, :cs, :iscompressed, :innerleap, :preventpar), Tuple{Int64, DiskArrays.RegularChunks, Bool, Int64, Bool}}})
precompile(Tuple{YAXArrays.DAT.var"#135#138"{YAXArrays.DAT.DATConfig{1, 1}, Base.Dict{Int64, Int64}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, Int64})
precompile(Tuple{typeof(YAXArrays.findAxis), DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.:(==)), DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.ReverseOrdered})
precompile(Tuple{typeof(Base.isequal), DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.unique), Array{NamedTuple{(:iloopax, :cs, :iscompressed, :innerleap, :preventpar), Tuple{Int64, DiskArrays.ChunkType, Bool, Int64, Bool}}, 1}})
precompile(Tuple{typeof(Base.hash), Tuple{Int64, DiskArrays.RegularChunks, Bool, Int64, Bool}, UInt64})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:lt,), Tuple{typeof(YAXArrays.DAT.cmpcachmisses)}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{typeof(YAXArrays.DAT.cmpcachmisses)}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.Lt{typeof(YAXArrays.DAT.cmpcachmisses)}}}, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lt,), Tuple{typeof(YAXArrays.DAT.cmpcachmisses)}}, typeof(Base.sort), Array{NamedTuple{(:iloopax, :cs, :iscompressed, :innerleap, :preventpar), Tuple{Int64, DiskArrays.ChunkType, Bool, Int64, Bool}}, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Base.Generator{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(YAXArrays.DAT.getLoopCacheSize), Int64, Array{Int64, 1}, Float64, Array{NamedTuple{(:iloopax, :cs, :iscompressed, :innerleap, :preventpar), Tuple{Int64, DiskArrays.ChunkType, Bool, Int64, Bool}}, 1}, Base.Dict{Int64, Int64}})
precompile(Tuple{Type{MethodError}, Any, Any})
precompile(Tuple{typeof(YAXArrays.DAT.generateOutCubes), YAXArrays.DAT.DATConfig{1, 1}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Int64, 1}, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Int64, 1}, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{YAXArrays.DAT.var"#69#73"{YAXArrays.DAT.DATConfig{1, 1}}}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}}}, Base.var"#4#5"{YAXArrays.DAT.var"#69#73"{YAXArrays.DAT.DATConfig{1, 1}}}}})
precompile(Tuple{Base.var"#4#5"{YAXArrays.DAT.var"#69#73"{YAXArrays.DAT.DATConfig{1, 1}}}, Tuple{Int64, DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}})
precompile(Tuple{YAXArrays.DAT.var"#70#74"{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, YAXArrays.DAT.InputCube{3}})
precompile(Tuple{typeof(YAXArrays.findAxis), DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}})
precompile(Tuple{typeof(Base.unique), Tuple{DiskArrays.RegularChunks}})
precompile(Tuple{typeof(Base.Iterators._only), Array{DiskArrays.RegularChunks, 1}, typeof(Base.iterate)})
precompile(Tuple{typeof(Base._array_for), Type{DiskArrays.RegularChunks}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DiskArrays.RegularChunks, 1}, DiskArrays.RegularChunks, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}}}, Base.var"#4#5"{YAXArrays.DAT.var"#69#73"{YAXArrays.DAT.DATConfig{1, 1}}}}, Tuple{Int64, Int64}})
precompile(Tuple{Base.var"#4#5"{YAXArrays.DAT.var"#69#73"{YAXArrays.DAT.DATConfig{1, 1}}}, Tuple{Int64, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}})
precompile(Tuple{YAXArrays.DAT.var"#70#74"{DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, YAXArrays.DAT.InputCube{3}})
precompile(Tuple{typeof(YAXArrays.findAxis), DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DiskArrays.approx_chunksize), Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DiskArrays.approx_chunksize), Tuple{Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DiskArrays.grid_offset), Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DiskArrays.grid_offset), Tuple{Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), Base.var"#70#71"{YAXArrays.DAT.var"#121#122"{YAXArrays.DAT.DATConfig{1, 1}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Nothing, Tuple{YAXArrays.DAT.OutputCube}})
precompile(Tuple{typeof(YAXArrays.DAT.generateOutCube), YAXArrays.DAT.OutputCube, Base.RefValue{Bool}, Float64, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:path, :overwrite), Tuple{String, Bool}}}, Symbol, Nothing})
precompile(Tuple{typeof(Base.iterate), Array{Pair{A, B} where B where A, 1}, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:path, :overwrite), Tuple{String, Bool}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:recursive,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{Type{NamedTuple{(:status_exception, :socket_type_tls), T} where T<:Tuple}, Tuple{Bool, DataType}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:status_exception, :socket_type_tls), Tuple{Bool, DataType}}, Type{NamedTuple{(:headers, :body, :query, :observelayers), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:status_exception, :socket_type_tls), Tuple{Bool, DataType}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:status_exception, :socket_type_tls), Tuple{Bool, DataType}}}})
precompile(Tuple{Zarr.var"##BloscCompressor#8", Int64, Int64, String, Int64, Type{Zarr.BloscCompressor}})
precompile(Tuple{Type{Zarr.BloscCompressor}, Int64, Int64, String, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:path, :overwrite), Tuple{String, Bool}}, typeof(YAXArrays.DAT.generateOutCube), Type{ZarrExt.ZarrDataset}, Type, YAXArrays.DAT.OutputCube, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, YAXArrays.DAT.var"#118#119", Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Base.Generator{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, YAXArrays.DAT.var"#118#119"}})
precompile(Tuple{typeof(Base.getproperty), Base.Iterators.Enumerate{Tuple{Nothing, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Nothing, Nothing}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Nothing, Nothing}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{10, Symbol}})
precompile(Tuple{typeof(Base.cconvert), Type, GDAL.OSRAxisMappingStrategy})
precompile(Tuple{typeof(Base.unsafe_convert), Type{GDAL.OSRAxisMappingStrategy}, GDAL.OSRAxisMappingStrategy})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, NetCDF.NcVar{T, N, M} where M where N where T, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Int64, DataType}})
precompile(Tuple{typeof(Base.getproperty), Base.KeySet{Int64, Base.Dict{Int64, DataType}}, Symbol})
precompile(Tuple{typeof(Base.values), Base.Dict{Int64, DataType}})
precompile(Tuple{typeof(Base.getproperty), Base.ValueIterator{Base.Dict{Int64, DataType}}, Symbol})
precompile(Tuple{typeof(Base._maybe_reshape_parent), Array{UInt64, 1}, Tuple{Bool}})
precompile(Tuple{typeof(Base.reshape), Array{UInt64, 1}, Base.Val{1}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, NetCDF.NcDim, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{NamedTuple{(:mode,), T} where T<:Tuple}, Tuple{UInt16}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Int32}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._similar_shape), Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:T, :chunksize, :chunkoffset, :path, :overwrite), Tuple{Union, Tuple{Int64, Int64}, Tuple{Int64, Int64}, String, Bool}}, typeof(YAXArrays.Datasets.createdataset), Type, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{YAXArrays.Datasets.var"##createdataset#123", String, Nothing, Type, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool, Base.Dict{String, Any}, Base.Dict{String, Any}, String, String, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(YAXArrays.Datasets.createdataset), Type, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{typeof(YAXArrays.findAxis), String, Array{DimensionalData.Dimensions.Dimension{T} where T, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, YAXArrays.var"#1#2"{YAXArrays.ByName}, Tuple{Base.Broadcast.Extruded{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Bool}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, YAXArrays.var"#1#2"{YAXArrays.ByName}, Tuple{Base.Broadcast.Extruded{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(YAXArrays.Datasets.arrayfromaxis), Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(YAXArrays.Datasets.arrayfromaxis), Tuple{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(YAXArrays.Datasets.arrayfromaxis), DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(YAXArrays.Datasets.arrayfromaxis), Tuple{Base.Broadcast.Extruded{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64, Int64}}}, Type{NamedTuple{(:name, :data, :attrs), Tuple{String, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, Base.Dict{String, Any}}}}})
precompile(Tuple{typeof(Base.setindex!), Array{NamedTuple{(:name, :data, :attrs), Tuple{String, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, Base.Dict{String, Any}}}, 1}, NamedTuple{(:name, :data, :attrs), Tuple{String, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, Base.Dict{String, Any}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{NamedTuple{(:name, :data, :attrs), Tuple{String, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, Base.Dict{String, Any}}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(YAXArrays.Datasets.arrayfromaxis), Tuple{Base.Broadcast.Extruded{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64, Int64}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(YAXArrays.Datasets.arrayfromaxis), DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(YAXArrays.Datasets.arrayfromaxis), Tuple{Base.Broadcast.Extruded{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64, Int64}}}, Type{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Array{NamedTuple{(:name, :data, :attrs), Tuple{String, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, Base.Dict{String, Any}}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(YAXArrays.Datasets.arrayfromaxis), Tuple{Base.Broadcast.Extruded{Array{DimensionalData.Dimensions.Dimension{T} where T, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64, Int64}}}, NamedTuple{(:name, :data, :attrs), Tuple{String, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, Base.Dict{String, Any}}}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{Int64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._all), typeof(Base.iszero), Tuple{Int64, Int64}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float64})
precompile(Tuple{typeof(Base.fill), Type, Int64})
precompile(Tuple{Type{Array{DataType, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Array{DataType, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getproperty), Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.string), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Base.RefValue{Symbol}}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}, Type{String}})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, String, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.fill), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.fill), Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.fill), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}})
precompile(Tuple{typeof(Base.setindex!), Array{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, 1}, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, O, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata} where O}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, O, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata} where O, 1}, Array{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, O, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata} where O, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Dict{String, Any}, 1}, Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Dict{String, Any}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{NamedTuple{(:name, :data, :attrs), T} where T<:Tuple, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Float64}, Float64})
precompile(Tuple{Type{NamedTuple{(:offset,), T} where T<:Tuple}, Tuple{Tuple{Int64}}})
precompile(Tuple{typeof(Base.all), Tuple{Bool}})
precompile(Tuple{typeof(DiskArrays.batchstrategy), DiskArrays.Chunked{DiskArrays.ChunkRead{DiskArrays.NoStepRange}}})
precompile(Tuple{Type{DiskArrays.NoBatch{S} where S}, DiskArrays.ChunkRead{DiskArrays.NoStepRange}})
precompile(Tuple{typeof(Base.getproperty), DiskArrays.DiskIndex{0, 0, Tuple{}, Tuple{}, Tuple{}}, Symbol})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pair{Base.IteratorsMD.CartesianIndex{1}, Union{Nothing, Array{UInt8, 1}}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.:(<=)), Int64, Int32})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.mul_prod)}, Symbol})
precompile(Tuple{Type{NamedTuple{(:density_threshold,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.length), Tuple{Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base.compute_stride1), Int64, Tuple{}, Tuple{}})
precompile(Tuple{typeof(Base.compute_linindex), Int64, Int64, Tuple{}, Tuple{}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, NTuple{5, Base.Missing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, NTuple{5, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(YAXArrayBase.create_dataset), Type, String, Base.Dict{String, Any}, Array{String, 1}, Array{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, O, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata} where O, 1}, Array{Base.Dict{String, Any}, 1}, Array{DataType, 1}, Array{String, 1}, Array{Array{String, 1}, 1}, Array{Base.Dict{String, Any}, 1}, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Base.Regex, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Base.Regex, DataType}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:attrs,), Tuple{Base.Dict{String, Any}}}, typeof(Zarr.zgroup), Zarr.DirectoryStore, String})
precompile(Tuple{typeof(YAXArrayBase.add_var), ZarrExt.ZarrDataset, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, String, Tuple{String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Nothing})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:fill_value, :fill_as_missing, :attrs, :chunks), Tuple{Float64, Bool, Base.Dict{String, Any}, Tuple{Int64}}}, typeof(Zarr.zcreate), Type{Float64}, Zarr.ZGroup{Zarr.DirectoryStore}, String, Int64})
precompile(Tuple{Type{Zarr.Metadata{Float64, 1, Zarr.BloscCompressor, Nothing}}, Int64, Tuple{Int64}, Tuple{Int64}, String, Zarr.BloscCompressor, Float64, Char, Nothing})
precompile(Tuple{typeof(Zarr.writemetadata), Zarr.DirectoryStore, String, Zarr.Metadata{Float64, 1, Zarr.BloscCompressor, Nothing}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Nothing})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Tuple{Int64}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Char})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Float64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Zarr.BloscCompressor})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Array{String, 1}})
precompile(Tuple{Type{Zarr.ZArray{Float64, 1, Zarr.BloscCompressor, Zarr.DirectoryStore}}, Zarr.Metadata{Float64, 1, Zarr.BloscCompressor, Nothing}, Zarr.DirectoryStore, String, Base.Dict{String, Any}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Zarr.ZArray{T, N, C, S} where S<:Zarr.AbstractStore where C<:Zarr.Compressor where N where T}, Zarr.ZArray{Float64, 1, Zarr.BloscCompressor, Zarr.DirectoryStore}, String})
precompile(Tuple{typeof(Base.copyto!), Zarr.ZArray{Float64, 1, Zarr.BloscCompressor, Zarr.DirectoryStore}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}})
precompile(Tuple{Zarr.var"#74#78"{Zarr.ZArray{Float64, 1, Zarr.BloscCompressor, Zarr.DirectoryStore}, Base.Channel{Pair{Base.IteratorsMD.CartesianIndex{1}, Union{Nothing, Array{UInt8, 1}}}}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{Int64}, Char})
precompile(Tuple{Zarr.var"#75#79"{Zarr.ZArray{Float64, 1, Zarr.BloscCompressor, Zarr.DirectoryStore}, Base.Channel{Pair{Base.IteratorsMD.CartesianIndex{1}, Union{Nothing, Array{UInt8, 1}}}}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(YAXArrayBase.add_var), ZarrExt.ZarrDataset, DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}, String, Tuple{String}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.copyto!), Zarr.ZArray{Float64, 1, Zarr.BloscCompressor, Zarr.DirectoryStore}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}})
precompile(Tuple{Base.var"#743#744"{Base.Channel{Pair{Base.IteratorsMD.CartesianIndex{1}, Union{Nothing, Array{UInt8, 1}}}}, Task}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:chunksize,), Tuple{Tuple{Int64, Int64}}}, typeof(YAXArrayBase.add_var), ZarrExt.ZarrDataset, Type, String, Tuple{Int64, Int64}, Array{String, 1}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:fill_value, :fill_as_missing, :attrs, :chunks), Tuple{Float32, Bool, Base.Dict{String, Any}, Tuple{Int64, Int64}}}, typeof(Zarr.zcreate), Type{Float32}, Zarr.ZGroup{Zarr.DirectoryStore}, String, Int64, Vararg{Int64}})
precompile(Tuple{Zarr.var"##zcreate#105", Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:fill_value, :fill_as_missing, :attrs, :chunks), Tuple{Float32, Bool, Base.Dict{String, Any}, Tuple{Int64, Int64}}}}, typeof(Zarr.zcreate), Type{Float32}, Zarr.ZGroup{Zarr.DirectoryStore}, String, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:path, :fill_value, :fill_as_missing, :attrs, :chunks), Tuple{String, Float32, Bool, Base.Dict{String, Any}, Tuple{Int64, Int64}}}, typeof(Zarr.zcreate), Type{Float32}, Zarr.DirectoryStore, Int64, Int64})
precompile(Tuple{Type{Zarr.Metadata{Float32, 2, Zarr.BloscCompressor, Nothing}}, Int64, Tuple{Int64, Int64}, Tuple{Int64, Int64}, String, Zarr.BloscCompressor, Float32, Char, Nothing})
precompile(Tuple{typeof(Zarr.writemetadata), Zarr.DirectoryStore, String, Zarr.Metadata{Float32, 2, Zarr.BloscCompressor, Nothing}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Tuple{Int64, Int64}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Float32})
precompile(Tuple{Type{Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}}, Zarr.Metadata{Float32, 2, Zarr.BloscCompressor, Nothing}, Zarr.DirectoryStore, String, Base.Dict{String, Any}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Zarr.ZArray{T, N, C, S} where S<:Zarr.AbstractStore where C<:Zarr.Compressor where N where T}, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, YAXArrays.Datasets.var"#125#132"{ZarrExt.ZarrDataset, Bool, Array{YAXArrays.Cubes.CleanMe, 1}, Base.Dict{String, Any}}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, YAXArrays.Datasets.var"#125#132"{ZarrExt.ZarrDataset, Bool, Array{YAXArrays.Cubes.CleanMe, 1}, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base.getindex), Zarr.ZGroup{Zarr.DirectoryStore}, String})
precompile(Tuple{Type{DiskArrayTools.CFDiskArray{T, N, MT, P, OT} where OT where P where MT where N where T}, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float32})
precompile(Tuple{Type{DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}}, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32, Float32, Float32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:cleaner,), Tuple{Array{YAXArrays.Cubes.CleanMe, 1}}}, Type{YAXArrays.Cubes.YAXArray{T, N, A, D, Me} where Me where D where A<:AbstractArray{T, N} where N where T}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}, Base.Dict{String, Any}})
precompile(Tuple{typeof(DimensionalData.Dimensions.format), Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}})
precompile(Tuple{Type{Array{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Float32}, 2, DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Float32}, 2, DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, 1}, YAXArrays.Cubes.YAXArray{Union{Base.Missing, Float32}, 2, DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, Base.Generator{Array{String, 1}, YAXArrays.Datasets.var"#125#132"{ZarrExt.ZarrDataset, Bool, Array{YAXArrays.Cubes.CleanMe, 1}, Base.Dict{String, Any}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{YAXArrays.Cubes.YAXArray{Union{Base.Missing, Float32}, 2, DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, 1}, Int64})
precompile(Tuple{typeof(Base.:(|)), Base.Missing, Bool})
precompile(Tuple{typeof(Base.isequal), Bool})
precompile(Tuple{typeof(YAXArrays.DAT.runLoop), YAXArrays.DAT.DATConfig{1, 1}, Bool})
precompile(Tuple{Type{DiskArrays.GridChunks{N, C} where C<:Tuple{Vararg{DiskArrays.ChunkType, N}} where N}, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}})
precompile(Tuple{YAXArrays.DAT.var"#123#125"{Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, YAXArrays.DAT.OutputCube})
precompile(Tuple{typeof(Base.size), YAXArrays.Cubes.YAXArray{Union{Base.Missing, Float32}, 2, DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(YAXArrays.DAT.getindsall), Tuple{}, Int64, Tuple{}, Tuple{Int64, Int64}, YAXArrays.DAT.var"#127#129"{Tuple{Int64, Int64}}, YAXArrays.DAT.var"#128#130"{Tuple{Int64, Int64}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Float32}, N} where N}, UndefInitializer, Int64, Int64})
precompile(Tuple{YAXArrays.DAT.var"#124#126"{Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, YAXArrays.DAT.InputCube{3}})
precompile(Tuple{typeof(YAXArrays.DAT.getindsall), Tuple{}, Int64, Tuple{Int64}, Tuple{Int64, Int64}, YAXArrays.DAT.var"#127#129"{Tuple{Int64, Int64}}, YAXArrays.DAT.var"#128#130"{Tuple{Int64, Int64, Int64}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int16}, N} where N}, UndefInitializer, Int64, Int64, Int64})
precompile(Tuple{YAXArrays.DAT.var"#108#113"{YAXArrays.DAT.DATConfig{1, 1}}, YAXArrays.DAT.InputCube{3}, Array{Union{Base.Missing, Int16}, 3}})
precompile(Tuple{typeof(YAXArrays.DAT.getindsall), Tuple{}, Int64, Tuple{Int64}, Tuple{Int64, Int64}, YAXArrays.DAT.var"#109#114"{YAXArrays.DAT.InputCube{3}}, YAXArrays.DAT.var"#81#82"})
precompile(Tuple{typeof(YAXArrays.DAT.getindsall), Tuple{Bool}, Int64, Tuple{Int64}, Tuple{Int64}, YAXArrays.DAT.var"#109#114"{YAXArrays.DAT.InputCube{3}}, YAXArrays.DAT.var"#81#82"})
precompile(Tuple{Type{YAXArrays.YAXTools.PickAxisArray{T, N, AT, P, PERM} where PERM where P where AT<:(AbstractArray{T, N} where N where T) where N where T}, Array{Union{Base.Missing, Int16}, 3}, Tuple{Bool, Bool, Base.Colon}})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Bool}, Bool})
precompile(Tuple{typeof(Base.replace), Array{Int64, 1}, Pair{Int64, Base.Colon}})
precompile(Tuple{YAXArrays.DAT.var"#110#115", YAXArrays.DAT.OutputCube, Array{Union{Base.Missing, Float32}, 2}})
precompile(Tuple{Type{YAXArrays.YAXTools.PickAxisArray{T, N, AT, P, PERM} where PERM where P where AT<:(AbstractArray{T, N} where N where T) where N where T}, Array{Union{Base.Missing, Float32}, 2}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.length), Base.BottomRF{typeof(Base.min)}}, Symbol})
precompile(Tuple{typeof(ProgressMeter.progress_map), Function, Vararg{Any}})
precompile(Tuple{typeof(ProgressMeter.ncalls), typeof(Base.map), Function, DiskArrays.GridChunks{2, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}})
precompile(Tuple{Type{ProgressMeter.Progress}, Int64})
precompile(Tuple{ProgressMeter.var"##progress_map#43", typeof(Base.map), ProgressMeter.Progress, Int64, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ProgressMeter.progress_map), Function, Vararg{Any}})
precompile(Tuple{Type{Distributed.RemoteChannel{T} where T<:(Base.AbstractChannel{T} where T)}, Function, Int64})
precompile(Tuple{Distributed.var"##remotecall_fetch#158", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Distributed.remotecall_fetch), Function, Distributed.LocalProcess, Function, Vararg{Any}})
precompile(Tuple{typeof(Distributed.run_work_thunk), Distributed.var"#153#154"{Distributed.var"#125#126", Tuple{ProgressMeter.var"#44#47"{Int64}, Distributed.RRID}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Bool})
precompile(Tuple{Distributed.var"#125#126", Function, Distributed.RRID})
precompile(Tuple{typeof(Base.lock), Distributed.var"#129#130"{Distributed.ProcessGroup, Distributed.RRID, ProgressMeter.var"#44#47"{Int64}}, Base.ReentrantLock})
precompile(Tuple{ProgressMeter.var"#44#47"{Int64}})
precompile(Tuple{Type{Distributed.RemoteValue}, Base.Channel{Bool}})
precompile(Tuple{typeof(Base.lock), Base.var"#782#783"{Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}, Distributed.RemoteChannel{Base.Channel{Bool}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), Base.var"#776#777"{Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}, Nothing, Distributed.RemoteChannel{Base.Channel{Bool}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.hash), Distributed.RemoteChannel{Base.Channel{Bool}}, UInt64})
precompile(Tuple{typeof(Base.map), Function, DiskArrays.GridChunks{2, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ProgressMeter.var"#46#49"{Distributed.RemoteChannel{Base.Channel{Bool}}, YAXArrays.DAT.var"#100#102"{YAXArrays.DAT.DATConfig{1, 1}}}, DiskArrays.GridChunks{2, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{Base.var"#70#71"{YAXArrays.DAT.var"#147#150"}}, Symbol})
precompile(Tuple{typeof(Base.collect_similar), DiskArrays.GridChunks{2, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, Base.Generator{DiskArrays.GridChunks{2, Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}}, ProgressMeter.var"#46#49"{Distributed.RemoteChannel{Base.Channel{Bool}}, YAXArrays.DAT.var"#100#102"{YAXArrays.DAT.DATConfig{1, 1}}}}})
precompile(Tuple{typeof(YAXArrays.DAT.updateinars), YAXArrays.DAT.DATConfig{1, 1}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Tuple{Array{Union{Base.Missing, Int16}, 3}}})
precompile(Tuple{typeof(YAXArrays.DAT.updatears), Tuple{YAXArrays.DAT.InputCube{3}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Symbol, Tuple{Array{Union{Base.Missing, Int16}, 3}}})
precompile(Tuple{typeof(Core.checked_dims), Int64, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Core._checked_mul_dims), Int64, Int64, Int64, Vararg{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, DiskArrays.var"#45#47"{Tuple{}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, DiskArrays.var"#45#47"{Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, DiskArrays.var"#45#47"{Tuple{}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, DiskArrays.var"#45#47"{Tuple{}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.UnitRange{Int64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.UnitRange{Int64}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, DiskArrays.var"#45#47"{Tuple{}}}, Int64})
precompile(Tuple{typeof(Base.:(|)), ArchGDAL.GDALOpenFlag, ArchGDAL.GDALOpenFlag})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.promote_type)}, Symbol})
precompile(Tuple{Type{Ptr{GDAL.GDALRasterIOExtraArg}}, Ptr{Nothing}})
precompile(Tuple{Type{DiskArrays.DiskIndex{N, M, A, B, C} where C<:Tuple where B<:Tuple where A<:Tuple where M where N}, Tuple{}, Tuple{Int64}, Tuple{}, Tuple{Int64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DiskArrays.merge_index), DiskArrays.DiskIndex{0, 0, Tuple{}, Tuple{}, Tuple{}}, DiskArrays.DiskIndex{0, 1, Tuple{}, Tuple{Int64}, Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.isbitsunion), Type})
precompile(Tuple{typeof(Base.any), Function, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._any_tuple), Base.var"#58#59", Bool, Type, Type, Vararg{Type}})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndex{N} where N}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.IteratorsMD.CartesianIndex{3}, Symbol})
precompile(Tuple{typeof(YAXArrays.DAT.updatear), Symbol, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, YAXArrays.Cubes.YAXArray{Union{Base.Missing, Int16}, 3, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Ti{DimensionalData.Dimensions.Lookups.Sampled{Dates.DateTime, Base.SubArray{Dates.DateTime, 1, Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}, true}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Irregular{Tuple{Nothing, Nothing}}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int16}, 3}})
precompile(Tuple{typeof(YAXArrays.DAT.getindsall), Tuple{}, Int64, Tuple{Int64}, Tuple{Int64, Int64}, YAXArrays.DAT.var"#89#92"{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, YAXArrays.DAT.var"#81#82"})
precompile(Tuple{typeof(YAXArrays.DAT.getindsall), Tuple{Base.UnitRange{Int64}}, Int64, Tuple{Int64}, Tuple{Int64}, YAXArrays.DAT.var"#89#92"{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, YAXArrays.DAT.var"#81#82"})
precompile(Tuple{YAXArrays.DAT.var"#90#93", Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.argtail), Base.UnitRange{Int64}, Base.UnitRange{Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.map), YAXArrays.DAT.var"#90#93", Tuple{Base.UnitRange{Int64}, Base.Colon}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Function})
precompile(Tuple{typeof(Base.ntuple), Base.Returns{Int64}, Base.Val{3}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pair{Base.IteratorsMD.CartesianIndex{3}, Base.IteratorsMD.CartesianIndex{1}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Array{Base.IteratorsMD.CartesianIndex{3}, 1}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Array{Base.IteratorsMD.CartesianIndex{1}, 1}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.ExtremaMap{typeof(Base.first)}, typeof(Base._extrema_rf)}, Symbol})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pair{Int64, Int64}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Array{Int64, 1}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Base.UnitRange{Int64}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(DiskArrays.getindex_disk!), Nothing, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Base.UnitRange{Int64}, Vararg{Any}})
precompile(Tuple{typeof(DiskArrays.need_batch), DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.Colon}})
precompile(Tuple{typeof(DiskArrays.getindex_disk_nobatch!), Nothing, DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.Colon}})
precompile(Tuple{typeof(DiskArrays._resolve_indices), Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks, DiskArrays.RegularChunks}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.Colon}, DiskArrays.DiskIndex{0, 0, Tuple{}, Tuple{}, Tuple{}}, DiskArrays.NoBatch{Bool}})
precompile(Tuple{typeof(DiskArrays._resolve_indices), Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}, Tuple{Base.UnitRange{Int64}, Base.Colon}, DiskArrays.DiskIndex{1, 1, Tuple{Base.Colon}, Tuple{Base.Colon}, Tuple{Base.UnitRange{Int64}}}, DiskArrays.NoBatch{Bool}})
precompile(Tuple{typeof(Base._all), DiskArrays.var"#40#42", Tuple{Base.Colon, Base.Colon, Base.Colon}, Base.Colon})
precompile(Tuple{typeof(Base._all), DiskArrays.var"#41#43", Tuple{Base.Colon, Base.Colon, Base.Colon}, Base.Colon})
precompile(Tuple{typeof(DiskArrays.output_aliasing), DiskArrays.DiskIndex{3, 3, Tuple{Base.Colon, Base.Colon, Base.Colon}, Tuple{Base.Colon, Base.Colon, Base.Colon}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Int64, Int64})
precompile(Tuple{typeof(DiskArrays.readblock_sizecheck!), DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Array{Union{Base.Missing, Int16}, 3}, Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DiskArrays.readblock!), DiskArrays.SubDiskArray{Union{Base.Missing, Int16}, 3, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}, false}, Array{Union{Base.Missing, Int16}, 3}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DiskArrays._resolve_indices), Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks, DiskArrays.RegularChunks}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, DiskArrays.DiskIndex{0, 0, Tuple{}, Tuple{}, Tuple{}}, DiskArrays.NoBatch{Bool}})
precompile(Tuple{typeof(DiskArrays._resolve_indices), Tuple{DiskArrays.RegularChunks, DiskArrays.RegularChunks}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, DiskArrays.DiskIndex{1, 1, Tuple{Base.Colon}, Tuple{Base.Colon}, Tuple{Base.UnitRange{Int64}}}, DiskArrays.NoBatch{Bool}})
precompile(Tuple{typeof(DiskArrays.create_outputarray), Array{Union{Base.Missing, Int16}, 3}, DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(DiskArrays.readblock_sizecheck!), DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Array{Union{Base.Missing, Int16}, 3}, Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DiskArrays.readblock!), DiskArrayTools.CFDiskArray{Union{Base.Missing, Int16}, 3, Int16, DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Int16}, Array{Union{Base.Missing, Int16}, 3}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Array{Int16, N} where N}, UndefInitializer, Int64, Int64, Int64})
precompile(Tuple{typeof(DiskArrays.readblock_sizecheck!), DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Array{Int16, 3}, Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DiskArrays.readblock!), DiskArrayTools.DiskArrayStack{Int16, 3, RQADeforestation.BufferGDALBand{Int16}, 1}, Array{Int16, 3}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:ownedby,), Tuple{ArchGDAL.IDataset}}, Type{ArchGDAL.IRasterBand{Int16}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.Broadcast.broadcast!), typeof(DiskArrayTools.scaleoffs), Array{Union{Base.Missing, Int16}, 3}, Array{Int16, 3}, Int16, Int16, Int16})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.:(|))}, Symbol})
precompile(Tuple{typeof(YAXArrays.DAT.innerLoop), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Function, Tuple{YAXArrays.YAXTools.PickAxisArray{Union{Base.Missing, Int16}, 3, Array{Union{Base.Missing, Int16}, 3}, (1, 2, Base.Colon()), nothing}}, Tuple{YAXArrays.YAXTools.PickAxisArray{Union{Base.Missing, Float32}, 2, Array{Union{Base.Missing, Float32}, 2}, (1, 2), nothing}}, Tuple{Tuple{YAXArrays.DAT.AllMissing}}, YAXArrays.DAT.NoLoopAxes, Tuple{Float64}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Int16, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(RQADeforestation.rqatrend), Base.SubArray{Union{Base.Missing, Float32}, 0, Array{Union{Base.Missing, Float32}, 2}, Tuple{Int64, Int64}, true}, Base.SubArray{Union{Base.Missing, Int16}, 1, Array{Union{Base.Missing, Int16}, 3}, Tuple{Int64, Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Float64})
precompile(Tuple{typeof(YAXArrays.DAT.writeoutars), YAXArrays.DAT.DATConfig{1, 1}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Tuple{Array{Union{Base.Missing, Float32}, 2}}})
precompile(Tuple{typeof(Core._checked_mul_dims), Int64, Int64})
precompile(Tuple{typeof(Base._all), DiskArrays.var"#40#42", Tuple{Base.Colon, Base.Colon}, Base.Colon})
precompile(Tuple{typeof(Base._all), DiskArrays.var"#41#43", Tuple{Base.Colon, Base.Colon}, Base.Colon})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pair{Base.IteratorsMD.CartesianIndex{2}, Union{Nothing, Array{UInt8, 1}}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(YAXArrays.DAT.updatear), Symbol, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, YAXArrays.Cubes.YAXArray{Union{Base.Missing, Float32}, 2, DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}, Tuple{DimensionalData.Dimensions.X{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ForwardOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}, DimensionalData.Dimensions.Y{DimensionalData.Dimensions.Lookups.Sampled{Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, DimensionalData.Dimensions.Lookups.ReverseOrdered, DimensionalData.Dimensions.Lookups.Regular{Float64}, DimensionalData.Dimensions.Lookups.Points, DimensionalData.Dimensions.Lookups.NoMetadata}}}, Base.Dict{String, Any}}, Base.UnitRange{Int64}, Array{Int64, 1}, Array{Union{Base.Missing, Float32}, 2}})
precompile(Tuple{typeof(YAXArrays.DAT.getindsall), Tuple{}, Int64, Tuple{}, Tuple{Int64, Int64}, YAXArrays.DAT.var"#89#92"{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, YAXArrays.DAT.var"#81#82"})
precompile(Tuple{typeof(Base.map), YAXArrays.DAT.var"#90#93", Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DiskArrayTools.CFDiskArray{Union{Base.Missing, Float32}, 2, Float32, Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Float32}, Array{Union{Base.Missing, Float32}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DiskArrayTools.scaleoffsinv), Array{Union{Base.Missing, Float32}, 2}, Float32, Float32, Float32})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(DiskArrayTools.scaleoffsinv), Tuple{Array{Union{Base.Missing, Float32}, 2}, Float32, Float32, Float32}}})
precompile(Tuple{Type{BoundsError}})
precompile(Tuple{Type{NamedTuple{(:modifier,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, String}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:ignore_predictor,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:ignore_predictor,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:ignore_predictor,), Tuple{Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:ignore_predictor,), Tuple{Bool}}}})
precompile(Tuple{ProgressMeter.var"#45#48"{ProgressMeter.Progress, Distributed.RemoteChannel{Base.Channel{Bool}}}})
precompile(Tuple{typeof(Base.take!), Base.Channel{Bool}})
precompile(Tuple{typeof(Base.ntuple), Base.Returns{Int64}, Base.Val{2}})
precompile(Tuple{Zarr.var"#74#78"{Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Base.Channel{Pair{Base.IteratorsMD.CartesianIndex{2}, Union{Nothing, Array{UInt8, 1}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{Int64, Int64}, Char})
precompile(Tuple{Zarr.var"#75#79"{Zarr.ZArray{Float32, 2, Zarr.BloscCompressor, Zarr.DirectoryStore}, Base.Channel{Pair{Base.IteratorsMD.CartesianIndex{2}, Union{Nothing, Array{UInt8, 1}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Bool}, Bool})
precompile(Tuple{Base.var"#743#744"{Base.Channel{Pair{Base.IteratorsMD.CartesianIndex{2}, Union{Nothing, Array{UInt8, 1}}}}, Task}})
precompile(Tuple{typeof(Base.put!), Distributed.RemoteChannel{Base.Channel{Bool}}, Bool})
precompile(Tuple{typeof(Distributed.finalize_ref), Distributed.RemoteChannel{Base.Channel{Bool}}})
precompile(Tuple{typeof(Base.isequal), Distributed.RemoteChannel{Base.Channel{Bool}}, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Distributed.RemoteChannel{Base.Channel{Bool}}, WeakRef})
precompile(Tuple{typeof(Base.getproperty), Distributed.RemoteValue, Symbol})
precompile(Tuple{Base.var"#771#772"{Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}}, Distributed.RemoteChannel{Base.Channel{Bool}}})
precompile(Tuple{typeof(ArchGDAL.destroy), ArchGDAL.IDataset})
precompile(Tuple{typeof(Base.string), Module})
precompile(Tuple{typeof(Base.Filesystem.contractuser), String})
precompile(Tuple{typeof(LLVMExtra_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.:(-)), Int32})
precompile(Tuple{Type{NamedTuple{(:read, :write, :append, :truncate), T} where T<:Tuple}, Tuple{Bool, Bool, Nothing, Nothing}})
precompile(Tuple{Dates.var"##s53#31", Vararg{Any, 5}})
precompile(Tuple{Type{NamedTuple{(:append,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:append,), Tuple{Bool}}})
precompile(Tuple{typeof(Scratch.find_uuid), Base.UUID})
precompile(Tuple{typeof(Base.getproperty), Base.UUID, Symbol})
precompile(Tuple{typeof(Base.:(&)), UInt128, UInt8})
precompile(Tuple{typeof(Base.:(+)), Int64, UInt128})
precompile(Tuple{typeof(GPUCompiler.__init__)})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.isvarargtype), Any})
precompile(Tuple{typeof(Base.struct_subpadding), Type{NTuple{4, UInt8}}, Type{UInt32}})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{Base.Colon, Int64, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.sin), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:thresh,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:thresh,), Tuple{Float64}}, typeof(RQADeforestation.rqatrend_impl), Array{Float64, 1}})
precompile(Tuple{typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:jlruntime,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:jlruntime,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{Type{NamedTuple{(:kernel, :entry_abi, :always_inline), T} where T<:Tuple}, Tuple{Bool, Symbol, Bool}})
precompile(Tuple{Type{NamedTuple{(:validate, :optimize, :cleanup), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{Type{NamedTuple{(:unoptimize_throw_blocks,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:inline_cost_threshold,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:allow_boxed,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:kernel,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:toplevel,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:recursive, :exist_ok), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:cleanup,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Int64}, Int32})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Union{LLVM.CallBrInst, LLVM.CallInst, LLVM.InvokeInst}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.Compiler.dominates_ssa), Core.Compiler.IncrementalCompact, Core.Compiler.GenericDomTree{false}, Core.Compiler.NewSSAValue, Core.Compiler.NewSSAValue})
precompile(Tuple{typeof(Base.keys), Base.SubString{String}})
precompile(Tuple{Type{Base.EachStringIndex{T} where T<:AbstractString}, Base.SubString{String}})
precompile(Tuple{typeof(Base.sizeof), Base.SubString{String}})
precompile(Tuple{typeof(Base.checkbounds), Type{Bool}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.SubString{String}, Symbol})
precompile(Tuple{typeof(Base.checkbounds), Type{Bool}, String, Int64})
precompile(Tuple{typeof(Base.ncodeunits), String})
precompile(Tuple{typeof(Base.between), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(<=)), Char, Char})
precompile(Tuple{typeof(Base.rem), Char, Type{UInt8}})
precompile(Tuple{Type{NamedTuple{(:ignorestatus,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:use_memory_ssa,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:validate, :optimize, :cleanup), Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base.in), Nothing, NTuple{4, String}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LLVM.Instruction, Any}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, LLVM.Use, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.isbitstype), Any})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.KeySet{String, Base.Dict{String, Int64}}, Symbol})
precompile(Tuple{typeof(AllocCheck.check_allocs), Any, Any})
precompile(Tuple{typeof(Base._stable_typeof), Function})
precompile(Tuple{GPUCompiler.var"##emit_llvm#186", Bool, Bool, Bool, Bool, Bool, Bool, typeof(GPUCompiler.emit_llvm), GPUCompiler.CompilerJob{T, P} where P where T})
precompile(Tuple{typeof(Base.:(>)), UInt64, UInt64})
precompile(Tuple{typeof(Core.Compiler.abstract_call_known), GPUCompiler.GPUInterpreter, Any, Core.Compiler.ArgInfo, Core.Compiler.StmtInfo, Core.Compiler.InferenceState, Int64})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Base.CoreLogging.ConsoleLogger})
precompile(Tuple{typeof(Core.Compiler.from_interprocedural!), GPUCompiler.GPUInterpreter, Any, Core.Compiler.InferenceState, Core.Compiler.ArgInfo, Any})
precompile(Tuple{typeof(Core.Compiler.builtin_tfunction), GPUCompiler.GPUInterpreter, Any, Array{Any, 1}, Core.Compiler.InferenceState})
precompile(Tuple{typeof(Core.Compiler.optimize), GPUCompiler.GPUInterpreter, Core.Compiler.OptimizationState{GPUCompiler.GPUInterpreter}, Core.Compiler.InferenceResult})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, UInt64})
precompile(Tuple{typeof(Base.getindex), Pair{Symbol, DataType}, Int64})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, UInt32})
precompile(Tuple{typeof(Base.rem), UInt32, Type{UInt64}})
precompile(Tuple{typeof(Base.rem), UInt8, Type{UInt32}})
precompile(Tuple{Core.Compiler.var"##analyze_method!#517", Bool, Array{Any, 1}, Nothing, typeof(Core.Compiler.analyze_method!), Core.MethodMatch, Array{Any, 1}, Core.Compiler.CallInfo, UInt32, Core.Compiler.InliningState{GPUCompiler.GPUInterpreter}})
precompile(Tuple{typeof(Base.convert), Type{UInt32}, UInt32})
precompile(Tuple{typeof(Base.rem), UInt32, Type{UInt32}})
precompile(Tuple{typeof(Base.:(*)), Int64, UInt64})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, Type{Base.MappingRF{F, T} where T where F}, Type})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Type{Int64}, Base.BottomRF{typeof(Base.:(*))}}, Symbol})
precompile(Tuple{StaticArraysCore.var"##s4#1", Vararg{Any, 9}})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), StaticArraysCore.var"#2#3", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Type, Function, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.min), Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.min), Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.checkbounds_indices), Type{Bool}, Tuple{StaticArrays.SOneTo{2}, StaticArrays.SOneTo{2}}, Tuple{Int64, Int64}})
precompile(Tuple{GPUCompiler.var"#81#84"{GPUCompiler.CompilerJob{GPUCompiler.NativeCompilerTarget, AllocCheck.NativeParams}}, LLVM.Module})
precompile(Tuple{Type{LLVM.DataLayout}, String})
precompile(Tuple{typeof(LLVM.name!), LLVM.GlobalVariable, String})
precompile(Tuple{typeof(LLVM.name!), LLVM.Function, String})
precompile(Tuple{typeof(GPUCompiler.finish_module!), GPUCompiler.CompilerJob{GPUCompiler.NativeCompilerTarget, AllocCheck.NativeParams}, LLVM.Module, LLVM.Function})
precompile(Tuple{Type{Pair{A, B} where B where A}, GPUCompiler.CompilerJob{GPUCompiler.NativeCompilerTarget, AllocCheck.NativeParams}, String})
precompile(Tuple{Type{Base.Dict{GPUCompiler.CompilerJob{T, P} where P where T, String}}, Pair{GPUCompiler.CompilerJob{GPUCompiler.NativeCompilerTarget, AllocCheck.NativeParams}, String}})
precompile(Tuple{typeof(LLVM.name), LLVM.Function})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:ignore_throw, :invoke_entry), Tuple{Bool, Bool}}, typeof(AllocCheck.find_allocs!), LLVM.Module, NamedTuple{(:entry, :compiled), Tuple{LLVM.Function, Base.Dict{Any, Any}}}, String})
precompile(Tuple{typeof(LLVM.API.LLVMCreateBuilderInContext), LLVM.Context})
precompile(Tuple{typeof(LLVM.API.LLVMInt32TypeInContext), LLVM.Context})
precompile(Tuple{Type{LLVM.SwitchInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.InlineAsm}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.name), LLVM.InlineAsm})
precompile(Tuple{Type{LLVM.GetElementPtrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.BitCastInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.LoadInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FenceInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.Function}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.in), Nothing, NTuple{16, String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:ignore_throw,), Tuple{Bool}}, typeof(AllocCheck.classify_runtime_fn), String})
precompile(Tuple{Type{LLVM.AllocaInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.StoreInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.AddInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FreezeInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SubInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ICmpInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SelectInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.BrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SIToFPInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FMulInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FAddInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.PtrToIntInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FCmpInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FPToSIInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.PHIInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.UnreachableInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ShlInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.AndInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FDivInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FSubInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.InsertElementInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ExtractElementInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ShuffleVectorInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.OrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ZExtInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden, :color), Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#1057", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden), NTuple{6, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##with_output_color#1056", Bool, Bool, Bool, Bool, Bool, Bool, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#1057", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(Base._atexit), Int32})
precompile(Tuple{Blosc.var"#1#2"})
precompile(Tuple{typeof(Base.isequal), Distributed.RemoteChannel{Base.Channel{Bool}}, Distributed.RemoteChannel{Base.Channel{Bool}}})
precompile(Tuple{typeof(OpenSSL.free), OpenSSL.SSLContext})
precompile(Tuple{typeof(OpenSSL.free), OpenSSL.BIOMethod})
